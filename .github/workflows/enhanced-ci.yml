name: 🔒 Enhanced Security CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  FORCE_COLOR: true

jobs:
  security-quality-checks:
    name: 🔒 Security & Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install security dependencies
        run: npm list eslint-plugin-security ||  npm install --save-dev eslint-plugin-security@latest

      - name: 📦 Install Dependencies
        run: |
          npm ci
          # Ensure the real security plugin is present (eslint-config-security does not exist)
          npm ls eslint-plugin-security || npm install --save-dev eslint-plugin-security@latest

      - name: 🎨 ESLint with Security Rules
        run: |
          echo "Running ESLint with security rules..."
          npx eslint . --ext .js,.json --format json --output-file eslint-results.json || true
          npx eslint . --ext .js,.json --format stylish || true
        continue-on-error: true

      - name: 📝 Prettier Format Check
        run: |
          echo "Checking code formatting..."
          if npm run | grep -q "format:check"; then
            npm run format:check
          else
            npx prettier --check "src/**/*.js" "tests/**/*.js"
          fi

      - name: 🔒 Enhanced Security Audit
        run: |
          echo "Running comprehensive security audit..."
          npm audit --audit-level moderate --json > audit-results.json || true
          npm audit --audit-level moderate || echo "⚠️ Security issues found but continuing..."
          if command -v jq >/dev/null 2>&1 && [ -f audit-results.json ]; then
            HIGH_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0' 2>/dev/null || echo "0")
            CRITICAL_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0' 2>/dev/null || echo "0")
            echo "High vulnerabilities: $HIGH_VULNS"
            echo "Critical vulnerabilities: $CRITICAL_VULNS"
          fi

      - name: 📊 Code Quality Report
        run: |
          echo "## 🔍 Code Quality Analysis" >> $GITHUB_STEP_SUMMARY
          if [ -f eslint-results.json ]; then
            if command -v jq >/dev/null 2>&1; then
              ERRORS=$(cat eslint-results.json | jq '[.[].messages[] | select(.severity == 2)] | length' 2>/dev/null || echo "0")
              WARNINGS=$(cat eslint-results.json | jq '[.[].messages[] | select(.severity == 1)] | length' 2>/dev/null || echo "0")
              echo "- ESLint errors: $ERRORS" >> $GITHUB_STEP_SUMMARY
              echo "- ESLint warnings: $WARNINGS" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ESLint completed" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: 📤 Upload ESLint Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-results
          path: |
            eslint-results.json
            audit-results.json
          retention-days: 30
          compression-level: 6

  comprehensive-testing:
    name: 🧪 Testing Suite
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: security-quality-checks

    strategy:
      matrix:
        node-version: ['16.x', '18.x', '20.x']

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: ⚙️ Setup Test Environment
        run: |
          echo "NODE_ENV=test" > .env.test
          echo "JWT_SECRET=test-jwt-secret-${{ github.run_id }}-${{ matrix.node-version }}" >> .env.test

      - name: 🧪 Run Unit Tests
        run: |
          echo "Running unit tests on Node.js ${{ matrix.node-version }}..."
          if [ -f "package.json" ] && npm run | grep -q "test"; then
            npm test
          else
            echo "⚠️ No test script found - skipping"
          fi
        env:
          NODE_ENV: test

  build-security-check:
    name: 🚀 Build & Security Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [security-quality-checks, comprehensive-testing]

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Production Dependencies
        run: npm ci --omit=dev

      - name: 🔒 Production Security Check
        run: |
          echo "Verifying production security..."
          if [ -f ".env" ]; then
            echo "❌ .env file found in build! This is a security risk."
            exit 1
          fi
          echo "✅ Production build security verified"

  pipeline-status:
    name: 📋 Pipeline Status Report
    runs-on: ubuntu-latest
    if: always()
    needs:
      [security-quality-checks, comprehensive-testing, build-security-check]

    steps:
      - name: 📊 Generate Comprehensive Report
        run: |
          echo "# 🔒 Enhanced CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "- Security & Quality: ${{ needs.security-quality-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Testing: ${{ needs.comprehensive-testing.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build & Security: ${{ needs.build-security-check.result }}" >> $GITHUB_STEP_SUMMARY
